{
  "server": {
    "description": "Postman's MCP server connects AI agents, assistants, and chatbots directly to your APIs on Postman. Use natural language to prompt AI to automate work across your Postman collections, environments, workspaces, and more.",
    "name": "com.postman/postman-mcp-server",
    "status": "active",
    "packages": [
      {
        "environment_variables": [
          {
            "name": "POSTMAN_API_KEY",
            "value": "{api_key}",
            "variables": {
              "api_key": {
                "description": "Your Postman API key",
                "is_required": true,
                "is_secret": true
              }
            }
          }
        ],
        "name": "@postman/postman-mcp-server",
        "registry_name": "npm",
        "runtime_hint": "npx",
        "version": "latest"
      }
    ],
    "repository": {
      "readme": "# Postman MCP Server\n\nThis project offers the following Model Context Protocol (MCP) server options:\n\n- [**STDIO**](#stdio)\n- [**Streamable HTTP**](#streamable-http)\n\nFor more information about the available transports, see the [MCP specification](https://modelcontextprotocol.io/docs/concepts/transports).\n\n## STDIO\n\nThis is a lightweight solution that's ideal for integration with editors and tools like [VS Code](https://code.visualstudio.com/).\n\n\u003e For Docker set up and installation, see [DOCKER.md](./DOCKER.md).\n\n### VS Code integration\n\n\u003e **Note:**\n\u003e By default, this server provides 37 tools (minimal mode). Use the `--full` flag to access all 106 tools.\n\u003e Use the `--region` flag to specify the Postman API region (`us` or `eu`), or set the `POSTMAN_API_BASE_URL` environment variable directly.\n\nIntegrate your MCP server with Visual Studio Code and use it with VS Code extensions that support MCP. To do this, do the following:\n\n1. Create a *.vscode/mcp.json* file in your project and enter the following:\n\n    ```json\n    {\n        \"servers\": {\n            \"postman-api-mcp\": {\n                \"type\": \"stdio\",\n                \"command\": \"npx\",\n                \"args\": [\n                    \"@postman/postman-mcp-server\",\n                    \"--full\" // (optional) Use this flag to enable full mode\n                ],\n                \"env\": {\n                    \"POSTMAN_API_KEY\": \"${input:postman-api-key}\"\n                }\n            }\n        },\n        \"inputs\": [\n            {\n                \"id\": \"postman-api-key\",\n                \"type\": \"promptString\",\n                \"description\": \"Enter your Postman API key\"\n            }\n        ]\n    }\n    ```\n\n1. Install an MCP-compatible VS Code extension, such as GitHub Copilot, Claude for VS Code, or other AI assistants that support MCP.\n\n#### Configure the extension\n\nConfigure the extension to use the **postman-api-mcp** server, a local STDIO-based server that runs directly from your project files:\n\n1. Clone the **postman-mcp-server** repository.\n1. In the repository's root folder, run the `npm install` command. This installs all the required dependencies.\n1. Replace `${workspaceFolder}` in the *mcp.json* file with the full path to the Postman MCP repository.\n1. When prompted, enter your [Postman API key](https://go.postman.co/settings/me/api-keys).\n\n### Claude integration\n\nTo integrate the MCP server with Claude, check the latest [Postman MCP server release](https://github.com/postmanlabs/postman-mcp-server/releases) and download one of the following `.dxt` files:\n\n- **postman-api-mcp-minimal.dxt** - Contains 37 essential tools for basic Postman operations.\n- **postman-api-mcp-full.dxt** - Contains all 106+ tools for comprehensive Postman functionality.\n\nFor more information, see Anthropic's [Claude Desktop Extensions](https://www.anthropic.com/engineering/desktop-extensions) documentation.\n\n## Streamable HTTP\n\nThe streamable HTTP version is available at `https://mcp.postman.com`. It supports two tool configurations to better serve different use cases:\n\n- **Minimal** — Only includes essential tools for basic Postman operations, available at `https://mcp.postman.com/minimal`. This offers faster performance and simplifies use for those who only need basic Postman operations.\n- **Full** — Includes all available Postman API tools (100+ tools), available at `https://mcp.postman.com/mcp`.\n\n\u003e **Note:** The streamable EU HTTP server is available at `https://mcp.eu.postman.com`.\n\n### Cursor integration\n\nTo integrate the MCP server with Cursor, click the following button:\n\u003e Ensure the Authorization header uses the Bearer \u003cYOUR_API_KEY\u003e format.\n\n[![Install the Postman MCP Server](https://cursor.com/deeplink/mcp-install-dark.svg)](https://cursor.com/en/install-mcp?name=postman_mcp_server\u0026config=eyJ1cmwiOiJodHRwczovL21jcC5wb3N0bWFuLmNvbS9taW5pbWFsIiwiaGVhZGVycyI6eyJBdXRob3JpemF0aW9uIjoiQmVhcmVyIFlPVVJfQVBJX0tFWSJ9fQ%3D%3D)\n\n### VS Code integration\n\n\u003e By default, the server provides 37 tools. Use **Full** (`https://mcp.postman.com/mcp`) mode to access all 106 tools.\n\nTo install in VS Code, you can use the [Postman VS Code Extension](https://marketplace.visualstudio.com/items?itemName=Postman.postman-for-vscode). Or you can add the following to the *.vscode/mcp.json* file:\n\n```json\n{\n    \"servers\": {\n        \"postman-api-http-server\": {\n            \"type\": \"http\",\n            \"url\": \"https://mcp.postman.com/{minimal | mcp}\", // choose \"minimal\" or \"mcp\"\n            \"headers\": {\n                \"Authorization\": \"Bearer ${input:postman-api-key}\"\n            }\n        }\n    },\n    \"inputs\": [\n        {\n            \"id\": \"postman-api-key\",\n            \"type\": \"promptString\",\n            \"description\": \"Enter your Postman API key\"\n        }\n    ]\n}\n```\n\nWhen prompted, enter your Postman API key. Afterwards, the agent performs calls to the Postman cloud MCP server at `https://mcp.postman.com`.\n\n## Migration from v1.x to v2.x\n\n- **Tool naming changes** - All tool names changed from kebab-case to camelCase. For example:\n  - `create-collection` → `createCollection`\n  - `get-workspaces` → `getWorkspaces`\n  - `delete-environment` → `deleteEnvironment`\n- **Tool availability changes**\n  - The default (Minimal) behavior provides only 37 essential tools.\n  - The `--full` flag provides access to all 106 tools.\n\n## Questions and support\n\n- See the [Postman Agent Generator](https://postman.com/explore/agent-generator) page for updates and new capabilities.\n- See [Add your MCP requests to your collections](https://learning.postman.com/docs/postman-ai-agent-builder/mcp-requests/overview/) to learn how to use Postman to perform MCP requests.\n- Visit the [Postman Community](https://community.postman.com/) to share what you've built, ask questions, and get help.\n- You can connect to both HTTP and STDIO servers and test them using the [Postman MCP Server collection](https://www.postman.com/postman/postman-public-workspace/collection/681dc649440b35935978b8b7).\n",
      "source": "github",
      "url": "https://github.com/postmanlabs/postman-mcp-server"
    }
  }
}